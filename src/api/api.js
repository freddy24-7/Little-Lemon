const availableTimesByDate = {
    '2023-12-11': ['17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'],
    '2023-12-12': ['17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'],
    '2023-12-13': ['17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'],
    '2023-12-14': ['17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'],
    '2023-12-15': ['17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'],
    '2023-12-16': ['17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'],
    '2023-12-17': ['17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'],
    '2023-12-18': ['17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'],
    '2023-12-19': ['17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'],
    '2023-12-20': ['17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'],
    '2023-12-21': ['17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'],
    '2023-12-22': ['17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'],
    '2023-12-23': ['17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'],
    '2023-12-24': ['17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'],
    '2023-12-25': ['17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'],
    '2023-12-26': ['17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'],
    '2023-12-27': ['17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'],
    '2023-12-28': ['17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'],
    '2023-12-29': ['17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'],
    '2023-12-30': ['17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00'],
    '2023-12-31': ['17:00', '18:00', '19:00', '20:00', '21:00', '22:00', '23:00']
};

const fetchAPI = (date) => {
    return new Promise((resolve, reject) => {
        setTimeout(() =>{
            if(availableTimesByDate[date]){
                resolve(availableTimesByDate[date])
            }
            else{
                reject(new Error('No available times for the selected date.'));
            }
        } , 1000)
    })
}

const submitAPI = (formData) => {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            // Check if the date exists in the availableTimesByDate object
            if (availableTimesByDate[formData.date]) {
                // Filter out the selected time
                availableTimesByDate[formData.date] = availableTimesByDate[formData.date].filter(time => time !== formData.time);
                resolve(true); // Simulate successful submission
            } else {
                reject(new Error('No available times for the selected date or date is invalid.'));
            }
        }, 1000); // Simulate API delay
    });
};


export{fetchAPI,submitAPI}